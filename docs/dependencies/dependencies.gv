digraph VEBA_Dependencies {
    // Graph styling
    rankdir=TB;  // Top to bottom direction for hierarchical layout
    splines=true;
    overlap=false;
    nodesep=0.9;
    ranksep=1.5;
    fontname="Arial";
    fontsize=12;
    compound=true;  // Enable connections to and from clusters
    
    // Node styling
    node [fontname="Arial", fontsize=10, style=filled];
    
    // VEBA main node
    node [shape=box, fillcolor="#E6E6FA", style=filled, fontsize=14]
    VEBA [label="VEBA"];
    
    // Environment nodes styling
    node [shape=ellipse, fillcolor="#FFD580", style=filled, fontsize=12] // Orange
    
    // Module nodes styling
    node [shape=box, fillcolor="#A7C7E7", style=filled, fontsize=10] // Blue
    
    // Python libraries styling
    node [shape=component, fillcolor="#90EE90", style=filled, fontsize=9] // Light green
    
    // External tools styling
    node [shape=box, style="rounded,filled", fillcolor="#DDA0DD", fontsize=9] // Purple
    
    // Databases styling
    node [shape=cylinder, fillcolor="#FFFACD", style=filled, fontsize=9] // Yellow
    
    // Define subgraphs for better organization
    
    // VEBA as main node
    VEBA;
    
    // Define environments as clusters connected to VEBA
    subgraph cluster_environments {
        label="Environments";
        style="rounded,filled";
        color=lightgrey;
        
        VEBA_annotate_env [label="VEBA-annotate_env"];
        VEBA_assembly_env [label="VEBA-assembly_env"];
        VEBA_preprocess_env [label="VEBA-preprocess_env"];
        VEBA_binning_prokaryotic_env [label="VEBA-binning-prokaryotic_env"];
        VEBA_binning_eukaryotic_env [label="VEBA-binning-eukaryotic_env"];
        VEBA_binning_viral_env [label="VEBA-binning-viral_env"];
        VEBA_classify_prokaryotic_env [label="VEBA-classify-prokaryotic_env"];
        VEBA_classify_eukaryotic_env [label="VEBA-classify-eukaryotic_env"];
        VEBA_classify_viral_env [label="VEBA-classify-viral_env"];
        VEBA_mapping_env [label="VEBA-mapping_env"];
        VEBA_cluster_env [label="VEBA-cluster_env"];
        VEBA_biosynthetic_env [label="VEBA-biosynthetic_env"];
        VEBA_phylogeny_env [label="VEBA-phylogeny_env"];
    }
    
    // Connect VEBA to all environments
    VEBA -> VEBA_annotate_env;
    VEBA -> VEBA_assembly_env;
    VEBA -> VEBA_preprocess_env;
    VEBA -> VEBA_binning_prokaryotic_env;
    VEBA -> VEBA_binning_eukaryotic_env;
    VEBA -> VEBA_binning_viral_env;
    VEBA -> VEBA_classify_prokaryotic_env;
    VEBA -> VEBA_classify_eukaryotic_env;
    VEBA -> VEBA_classify_viral_env;
    VEBA -> VEBA_mapping_env;
    VEBA -> VEBA_cluster_env;
    VEBA -> VEBA_biosynthetic_env;
    VEBA -> VEBA_phylogeny_env;
    
    // Define modules and connect to environments
    
    // Preprocess module
    subgraph cluster_preprocess {
        label="Preprocess";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        preprocess [label="preprocess"];
        
        // Python libraries for preprocess
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            preprocess_soothsayer_utils [label="soothsayer_utils"];
            preprocess_fastq_preprocessor [label="fastq_preprocessor"];
            preprocess_pandas [label="pandas"];
            preprocess_tqdm [label="tqdm"];
        }
        
        // External tools for preprocess
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            preprocess_fastp [label="fastp"];
            preprocess_bowtie2 [label="Bowtie2"];
            preprocess_bbmap [label="BBMap/BBDuk"];
            preprocess_seqkit [label="SeqKit"];
            preprocess_kingfisher [label="Kingfisher"];
        }
        
        // Databases for preprocess
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            preprocess_contamination_db [label="Contamination DB"];
            preprocess_kmer_db [label="K-mer DB"];
        }
        
        // Connect module to its dependencies
        preprocess -> {preprocess_soothsayer_utils preprocess_fastq_preprocessor preprocess_pandas preprocess_tqdm};
        preprocess -> {preprocess_fastp preprocess_bowtie2 preprocess_bbmap preprocess_seqkit preprocess_kingfisher};
        preprocess -> {preprocess_contamination_db preprocess_kmer_db};
    }
    
    // Coverage module
    subgraph cluster_coverage {
        label="Coverage";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        coverage [label="coverage"];
        
        // Python libraries for coverage
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            coverage_pandas [label="pandas"];
            coverage_soothsayer_utils [label="soothsayer_utils"];
            coverage_genopype [label="genopype"];
        }
        
        // External tools for coverage
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            coverage_bowtie2 [label="Bowtie2"];
            coverage_samtools [label="Samtools"];
            coverage_featureCounts [label="featureCounts"];
            coverage_seqkit [label="SeqKit"];
            coverage_parallel [label="GNU Parallel"];
        }
        
        // Connect module to its dependencies
        coverage -> {coverage_pandas coverage_soothsayer_utils coverage_genopype};
        coverage -> {coverage_bowtie2 coverage_samtools coverage_featureCounts coverage_seqkit coverage_parallel};
    }
    
    // Coverage-long module
    subgraph cluster_coverage_long {
        label="Coverage-Long";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        coverage_long [label="coverage-long"];
        
        // Python libraries for coverage-long
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            coverage_long_pandas [label="pandas"];
            coverage_long_soothsayer_utils [label="soothsayer_utils"];
            coverage_long_genopype [label="genopype"];
        }
        
        // External tools for coverage-long
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            coverage_long_minimap2 [label="MiniMap2"];
            coverage_long_samtools [label="Samtools"];
            coverage_long_featureCounts [label="featureCounts"];
            coverage_long_seqkit [label="SeqKit"];
            coverage_long_parallel [label="GNU Parallel"];
        }
        
        // Connect module to its dependencies
        coverage_long -> {coverage_long_pandas coverage_long_soothsayer_utils coverage_long_genopype};
        coverage_long -> {coverage_long_minimap2 coverage_long_samtools coverage_long_featureCounts coverage_long_seqkit coverage_long_parallel};
    }
    
    // Assembly module
    subgraph cluster_assembly {
        label="Assembly";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        assembly [label="assembly"];
        
        // Python libraries for assembly
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            assembly_genopype [label="genopype"];
            assembly_soothsayer_utils [label="soothsayer_utils"];
            assembly_pandas [label="pandas"];
            assembly_biopython [label="biopython"];
            assembly_tqdm [label="tqdm"];
        }
        
        // External tools for assembly
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            assembly_spades [label="SPAdes/metaSPAdes"];
            assembly_megahit [label="MEGAHIT"];
            assembly_bowtie2 [label="Bowtie2"];
            assembly_samtools [label="Samtools"];
            assembly_featureCounts [label="featureCounts"];
            assembly_seqkit [label="SeqKit"];
            assembly_gfastats [label="gfastats"];
        }
        
        // Connect module to its dependencies
        assembly -> {assembly_genopype assembly_soothsayer_utils assembly_pandas assembly_biopython assembly_tqdm};
        assembly -> {assembly_spades assembly_megahit assembly_bowtie2 assembly_samtools assembly_featureCounts assembly_seqkit assembly_gfastats};
    }
    
    // Assembly-long module
    subgraph cluster_assembly_long {
        label="Assembly-Long";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        assembly_long [label="assembly-long"];
        
        // Python libraries for assembly-long
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            assembly_long_pandas [label="pandas"];
            assembly_long_soothsayer_utils [label="soothsayer_utils"];
            assembly_long_genopype [label="genopype"];
        }
        
        // External tools for assembly-long
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            assembly_long_flye [label="Flye/MetaFlye"];
            assembly_long_minimap2 [label="MiniMap2"];
            assembly_long_samtools [label="Samtools"];
            assembly_long_featureCounts [label="featureCounts"];
            assembly_long_seqkit [label="SeqKit"];
        }
        
        // Connect module to its dependencies
        assembly_long -> {assembly_long_pandas assembly_long_soothsayer_utils assembly_long_genopype};
        assembly_long -> {assembly_long_flye assembly_long_minimap2 assembly_long_samtools assembly_long_featureCounts assembly_long_seqkit};
    }
    
    // Binning-prokaryotic module
    subgraph cluster_binning_prokaryotic {
        label="Binning-Prokaryotic";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        binning_prokaryotic [label="binning-prokaryotic"];
        
        // Python libraries for binning-prokaryotic
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            binning_prokaryotic_pandas [label="pandas"];
            binning_prokaryotic_numpy [label="numpy"];
            binning_prokaryotic_genopype [label="genopype"];
            binning_prokaryotic_soothsayer_utils [label="soothsayer_utils"];
        }
        
        // External tools for binning-prokaryotic
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            binning_prokaryotic_metabat2 [label="MetaBat2"];
            binning_prokaryotic_semiBin2 [label="SemiBin2"];
            binning_prokaryotic_metadecoder [label="MetaDecoder"];
            binning_prokaryotic_metacoag [label="MetaCoAG"];
            binning_prokaryotic_vamb [label="VAMB"];
            binning_prokaryotic_binette [label="Binette"];
            binning_prokaryotic_tiara [label="Tiara"];
            binning_prokaryotic_pyrodigal [label="Pyrodigal"];
            binning_prokaryotic_barrnap [label="barrnap"];
            binning_prokaryotic_trnascan [label="tRNAscan-SE"];
            binning_prokaryotic_coverm [label="CoverM"];
            binning_prokaryotic_featureCounts [label="featureCounts"];
            binning_prokaryotic_seqkit [label="SeqKit"];
        }
        
        // Databases for binning-prokaryotic
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            binning_prokaryotic_checkm2_db [label="CheckM2 DB"];
        }
        
        // Connect module to its dependencies
        binning_prokaryotic -> {binning_prokaryotic_pandas binning_prokaryotic_numpy binning_prokaryotic_genopype binning_prokaryotic_soothsayer_utils};
        binning_prokaryotic -> {binning_prokaryotic_metabat2 binning_prokaryotic_semiBin2 binning_prokaryotic_metadecoder binning_prokaryotic_metacoag binning_prokaryotic_vamb binning_prokaryotic_binette binning_prokaryotic_tiara binning_prokaryotic_pyrodigal binning_prokaryotic_barrnap binning_prokaryotic_trnascan binning_prokaryotic_coverm binning_prokaryotic_featureCounts binning_prokaryotic_seqkit};
        binning_prokaryotic -> {binning_prokaryotic_checkm2_db};
    }
    
    // Binning-eukaryotic module
    subgraph cluster_binning_eukaryotic {
        label="Binning-Eukaryotic";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        binning_eukaryotic [label="binning-eukaryotic"];
        
        // Python libraries for binning-eukaryotic
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            binning_eukaryotic_genopype [label="genopype"];
            binning_eukaryotic_soothsayer_utils [label="soothsayer_utils"];
            binning_eukaryotic_pandas [label="pandas"];
            binning_eukaryotic_numpy [label="numpy"];
            binning_eukaryotic_torch [label="torch"];
            binning_eukaryotic_sklearn [label="scikit-learn"];
        }
        
        // External tools for binning-eukaryotic
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            binning_eukaryotic_metabat2 [label="MetaBat2"];
            binning_eukaryotic_tiara [label="Tiara"];
            binning_eukaryotic_metaeuk [label="MetaEuk"];
            binning_eukaryotic_pyrodigal [label="Pyrodigal"];
            binning_eukaryotic_barrnap [label="Barrnap"];
            binning_eukaryotic_trnascan [label="tRNAscan-SE"];
            binning_eukaryotic_featureCounts [label="featureCounts"];
        }
        
        // Databases for binning-eukaryotic
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            binning_eukaryotic_microeuk_db [label="MicroEuk DB"];
            binning_eukaryotic_busco_db [label="BUSCO lineages"];
        }
        
        // Connect module to its dependencies
        binning_eukaryotic -> {binning_eukaryotic_genopype binning_eukaryotic_soothsayer_utils binning_eukaryotic_pandas binning_eukaryotic_numpy binning_eukaryotic_torch binning_eukaryotic_sklearn};
        binning_eukaryotic -> {binning_eukaryotic_metabat2 binning_eukaryotic_tiara binning_eukaryotic_metaeuk binning_eukaryotic_pyrodigal binning_eukaryotic_barrnap binning_eukaryotic_trnascan binning_eukaryotic_featureCounts};
        binning_eukaryotic -> {binning_eukaryotic_microeuk_db binning_eukaryotic_busco_db};
    }
    
    // Binning-viral module
    subgraph cluster_binning_viral {
        label="Binning-Viral";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        binning_viral [label="binning-viral"];
        
        // Python libraries for binning-viral
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            binning_viral_pandas [label="pandas"];
            binning_viral_numpy [label="numpy"];
            binning_viral_biopython [label="biopython"];
            binning_viral_genopype [label="genopype"];
            binning_viral_soothsayer_utils [label="soothsayer_utils"];
            binning_viral_tqdm [label="tqdm"];
        }
        
        // External tools for binning-viral
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            binning_viral_genomad [label="geNomad"];
            binning_viral_checkv [label="CheckV"];
            binning_viral_pyrodigal_gv [label="pyrodigal-gv"];
            binning_viral_seqkit [label="seqkit"];
            binning_viral_featureCounts [label="featureCounts"];
        }
        
        // Databases for binning-viral
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            binning_viral_genomad_db [label="geNomad DB"];
            binning_viral_checkv_db [label="CheckV DB"];
        }
        
        // Connect module to its dependencies
        binning_viral -> {binning_viral_pandas binning_viral_numpy binning_viral_biopython binning_viral_genopype binning_viral_soothsayer_utils binning_viral_tqdm};
        binning_viral -> {binning_viral_genomad binning_viral_checkv binning_viral_pyrodigal_gv binning_viral_seqkit binning_viral_featureCounts};
        binning_viral -> {binning_viral_genomad_db binning_viral_checkv_db};
    }
    
    // Annotate module
    subgraph cluster_annotate {
        label="Annotate";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        annotate [label="annotate"];
        
        // Python libraries for annotate
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            annotate_pandas [label="pandas"];
            annotate_biopython [label="biopython"];
            annotate_genopype [label="genopype"];
            annotate_soothsayer_utils [label="soothsayer_utils"];
        }
        
        // External tools for annotate
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            annotate_diamond [label="Diamond"];
            annotate_hmmer [label="PyHMMSearch"];
            annotate_kofamsearch [label="PyKofamSearch"];
            annotate_seqkit [label="Seqkit"];
            annotate_pigz [label="pigz"];
        }
        
        // Databases for annotate
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            annotate_uniref [label="UniRef"];
            annotate_mibig [label="MIBiG"];
            annotate_vfdb [label="VFDB"];
            annotate_cazy [label="CAZy"];
            annotate_pfam [label="Pfam"];
            annotate_ncbifam [label="NCBIfam-AMRFinder"];
            annotate_antifam [label="AntiFam"];
            annotate_kofam [label="KOfam"];
            annotate_kegg [label="KEGG Pathway"];
        }
        
        // Connect module to its dependencies
        annotate -> {annotate_pandas annotate_biopython annotate_genopype annotate_soothsayer_utils};
        annotate -> {annotate_diamond annotate_hmmer annotate_kofamsearch annotate_seqkit annotate_pigz};
        annotate -> {annotate_uniref annotate_mibig annotate_vfdb annotate_cazy annotate_pfam annotate_ncbifam annotate_antifam annotate_kofam annotate_kegg};
    }
    
    // Classify-prokaryotic module
    subgraph cluster_classify_prokaryotic {
        label="Classify-Prokaryotic";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        classify_prokaryotic [label="classify-prokaryotic"];
        
        // Python libraries for classify-prokaryotic
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            classify_prokaryotic_genopype [label="genopype"];
            classify_prokaryotic_soothsayer_utils [label="soothsayer_utils"];
            classify_prokaryotic_pandas [label="pandas"];
            classify_prokaryotic_numpy [label="numpy"];
            classify_prokaryotic_dendropy [label="dendropy"];
            classify_prokaryotic_tqdm [label="tqdm"];
            classify_prokaryotic_psutil [label="psutil"];
        }
        
        // External tools for classify-prokaryotic
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            classify_prokaryotic_gtdbtk [label="GTDB-Tk"];
            classify_prokaryotic_fastani [label="FastANI"];
            classify_prokaryotic_mash [label="Mash"];
            classify_prokaryotic_skani [label="Skani"];
            classify_prokaryotic_prodigal [label="Prodigal"];
            classify_prokaryotic_hmmer [label="HMMER"];
            classify_prokaryotic_fasttree [label="FastTree"];
            classify_prokaryotic_pplacer [label="Pplacer"];
            classify_prokaryotic_krona [label="Krona"];
        }
        
        // Databases for classify-prokaryotic
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            classify_prokaryotic_gtdb [label="GTDB DB"];
            classify_prokaryotic_gtdb_mash [label="GTDB Mash DB"];
        }
        
        // Connect module to its dependencies
        classify_prokaryotic -> {classify_prokaryotic_genopype classify_prokaryotic_soothsayer_utils classify_prokaryotic_pandas classify_prokaryotic_numpy classify_prokaryotic_dendropy classify_prokaryotic_tqdm classify_prokaryotic_psutil};
        classify_prokaryotic -> {classify_prokaryotic_gtdbtk classify_prokaryotic_fastani classify_prokaryotic_mash classify_prokaryotic_skani classify_prokaryotic_prodigal classify_prokaryotic_hmmer classify_prokaryotic_fasttree classify_prokaryotic_pplacer classify_prokaryotic_krona};
        classify_prokaryotic -> {classify_prokaryotic_gtdb classify_prokaryotic_gtdb_mash};
    }
    
    // Classify-eukaryotic module
    subgraph cluster_classify_eukaryotic {
        label="Classify-Eukaryotic";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        classify_eukaryotic [label="classify-eukaryotic"];
        
        // Python libraries for classify-eukaryotic
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            classify_eukaryotic_genopype [label="genopype"];
            classify_eukaryotic_soothsayer_utils [label="soothsayer_utils"];
            classify_eukaryotic_pandas [label="pandas"];
            classify_eukaryotic_numpy [label="numpy"];
            classify_eukaryotic_biopython [label="biopython"];
            classify_eukaryotic_pyhmmsearch [label="pyhmmsearch"];
            classify_eukaryotic_pyhmmer [label="pyhmmer"];
            classify_eukaryotic_tqdm [label="tqdm"];
            classify_eukaryotic_psutil [label="psutil"];
        }
        
        // External tools for classify-eukaryotic
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            classify_eukaryotic_metaeuk [label="MetaEuk"];
            classify_eukaryotic_hmmer [label="HMMER/pyhmmer"];
            classify_eukaryotic_seqkit [label="SeqKit"];
            classify_eukaryotic_krona [label="Krona"];
        }
        
        // Databases for classify-eukaryotic
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            classify_eukaryotic_microeuk_db [label="MicroEuk"];
            classify_eukaryotic_eukaryota_odb10 [label="Eukaryota_odb10"];
            classify_eukaryotic_tax_mapping [label="Taxonomic Mapping"];
        }
        
        // Connect module to its dependencies
        classify_eukaryotic -> {classify_eukaryotic_genopype classify_eukaryotic_soothsayer_utils classify_eukaryotic_pandas classify_eukaryotic_numpy classify_eukaryotic_biopython classify_eukaryotic_pyhmmsearch classify_eukaryotic_pyhmmer classify_eukaryotic_tqdm classify_eukaryotic_psutil};
        classify_eukaryotic -> {classify_eukaryotic_metaeuk classify_eukaryotic_hmmer classify_eukaryotic_seqkit classify_eukaryotic_krona};
        classify_eukaryotic -> {classify_eukaryotic_microeuk_db classify_eukaryotic_eukaryota_odb10 classify_eukaryotic_tax_mapping};
    }
    
    // Classify-viral module
    subgraph cluster_classify_viral {
        label="Classify-Viral";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        classify_viral [label="classify-viral"];
        
        // Python libraries for classify-viral
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            classify_viral_pandas [label="pandas"];
            classify_viral_numpy [label="numpy"];
            classify_viral_soothsayer_utils [label="soothsayer_utils"];
            classify_viral_genopype [label="genopype"];
        }
        
        // External tools for classify-viral
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            classify_viral_genomad [label="geNomad"];
            classify_viral_seqkit [label="seqkit"];
            classify_viral_xgboost [label="xgboost"];
            classify_viral_tensorflow [label="tensorflow"];
        }
        
        // Databases for classify-viral
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            classify_viral_genomad_db [label="geNomad database"];
        }
        
        // Connect module to its dependencies
        classify_viral -> {classify_viral_pandas classify_viral_numpy classify_viral_soothsayer_utils classify_viral_genopype};
        classify_viral -> {classify_viral_genomad classify_viral_seqkit classify_viral_xgboost classify_viral_tensorflow};
        classify_viral -> {classify_viral_genomad_db};
    }
    
    // Mapping module
    subgraph cluster_mapping {
        label="Mapping";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        mapping [label="mapping"];
        
        // Python libraries for mapping
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            mapping_pandas [label="Pandas"];
            mapping_numpy [label="NumPy"];
            mapping_biopython [label="Biopython"];
            mapping_genopype [label="Genopype"];
            mapping_soothsayer_utils [label="Soothsayer_utils"];
            mapping_requests [label="Requests"];
        }
        
        // External tools for mapping
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            mapping_bowtie2 [label="Bowtie2"];
            mapping_samtools [label="Samtools"];
            mapping_subread [label="Subread"];
            mapping_seqkit [label="SeqKit"];
            mapping_salmon [label="Salmon"];
        }
        
        // Connect module to its dependencies
        mapping -> {mapping_pandas mapping_numpy mapping_biopython mapping_genopype mapping_soothsayer_utils mapping_requests};
        mapping -> {mapping_bowtie2 mapping_samtools mapping_subread mapping_seqkit mapping_salmon};
    }
    
    // Cluster module
    subgraph cluster_cluster {
        label="Cluster";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        cluster [label="cluster"];
        
        // Python libraries for cluster
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            cluster_genopype [label="genopype"];
            cluster_soothsayer_utils [label="soothsayer_utils"];
            cluster_pandas [label="pandas"];
            cluster_numpy [label="numpy"];
            cluster_biopython [label="biopython"];
            cluster_networkx [label="networkx"];
        }
        
        // External tools for cluster
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            cluster_skani [label="skani"];
            cluster_fastani [label="FastANI"];
            cluster_mmseqs2 [label="MMseqs2"];
            cluster_diamond [label="Diamond"];
        }
        
        // Connect module to its dependencies
        cluster -> {cluster_genopype cluster_soothsayer_utils cluster_pandas cluster_numpy cluster_biopython cluster_networkx};
        cluster -> {cluster_skani cluster_fastani cluster_mmseqs2 cluster_diamond};
    }
    
    // Biosynthetic module
    subgraph cluster_biosynthetic {
        label="Biosynthetic";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        biosynthetic [label="biosynthetic"];
        
        // Python libraries for biosynthetic
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            biosynthetic_genopype [label="genopype"];
            biosynthetic_soothsayer_utils [label="soothsayer_utils"];
            biosynthetic_pandas [label="pandas"];
            biosynthetic_biopython [label="BioPython"];
            biosynthetic_tqdm [label="tqdm"];
        }
        
        // External tools for biosynthetic
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            biosynthetic_antismash [label="antiSMASH"];
            biosynthetic_diamond [label="DIAMOND"];
            biosynthetic_mmseqs2 [label="MMSEQS2"];
            biosynthetic_krona [label="Krona"];
            biosynthetic_hmmer [label="HMMER"];
        }
        
        // Databases for biosynthetic
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            biosynthetic_mibig [label="MIBiG"];
            biosynthetic_vfdb [label="VFDB"];
            biosynthetic_antismash_db [label="antiSMASH DB"];
        }
        
        // Connect module to its dependencies
        biosynthetic -> {biosynthetic_genopype biosynthetic_soothsayer_utils biosynthetic_pandas biosynthetic_biopython biosynthetic_tqdm};
        biosynthetic -> {biosynthetic_antismash biosynthetic_diamond biosynthetic_mmseqs2 biosynthetic_krona biosynthetic_hmmer};
        biosynthetic -> {biosynthetic_mibig biosynthetic_vfdb biosynthetic_antismash_db};
    }
    
    // Phylogeny module
    subgraph cluster_phylogeny {
        label="Phylogeny";
        style="filled,rounded";
        color="#E0E0E0";
        node [style=filled];
        
        phylogeny [label="phylogeny"];
        
        // Python libraries for phylogeny
        {
            rank=same;
            node [shape=component, fillcolor="#90EE90"];
            phylogeny_genopype [label="genopype"];
            phylogeny_soothsayer_utils [label="soothsayer_utils"];
            phylogeny_biopython [label="biopython"];
            phylogeny_pyhmmsearch [label="pyhmmsearch"];
            phylogeny_pyhmmer [label="pyhmmer"];
            phylogeny_pandas [label="pandas"];
            phylogeny_numpy [label="numpy"];
            phylogeny_scipy [label="scipy"];
            phylogeny_ete3 [label="ete3"];
            phylogeny_tqdm [label="tqdm"];
            phylogeny_psutil [label="psutil"];
        }
        
        // External tools for phylogeny
        {
            rank=same;
            node [shape=box, style="rounded,filled", fillcolor="#DDA0DD"];
            phylogeny_muscle [label="MUSCLE"];
            phylogeny_clipkit [label="ClipKIT"];
            phylogeny_fasttree [label="FastTree/VeryFastTree"];
            phylogeny_iqtree [label="IQTree"];
            phylogeny_parallel [label="GNU Parallel"];
        }
        
        // Databases for phylogeny
        {
            rank=same;
            node [shape=cylinder, fillcolor="#FFFACD"];
            phylogeny_hmm_markers [label="HMM Marker DB"];
        }
        
        // Connect module to its dependencies
        phylogeny -> {phylogeny_genopype phylogeny_soothsayer_utils phylogeny_biopython phylogeny_pyhmmsearch phylogeny_pyhmmer phylogeny_pandas phylogeny_numpy phylogeny_scipy phylogeny_ete3 phylogeny_tqdm phylogeny_psutil};
        phylogeny -> {phylogeny_muscle phylogeny_clipkit phylogeny_fasttree phylogeny_iqtree phylogeny_parallel};
        phylogeny -> {phylogeny_hmm_markers};
    }
    
    // Connect environments to their respective modules
    VEBA_preprocess_env -> preprocess;
    VEBA_assembly_env -> assembly;
    VEBA_assembly_env -> assembly_long;
    VEBA_assembly_env -> coverage;
    VEBA_assembly_env -> coverage_long;
    VEBA_binning_prokaryotic_env -> binning_prokaryotic;
    VEBA_binning_eukaryotic_env -> binning_eukaryotic;
    VEBA_binning_viral_env -> binning_viral;
    VEBA_annotate_env -> annotate;
    VEBA_classify_prokaryotic_env -> classify_prokaryotic;
    VEBA_classify_eukaryotic_env -> classify_eukaryotic;
    VEBA_classify_viral_env -> classify_viral;
    VEBA_mapping_env -> mapping;
    VEBA_cluster_env -> cluster;
    VEBA_biosynthetic_env -> biosynthetic;
    VEBA_phylogeny_env -> phylogeny;
    
    // Module workflow connections
    edge [color=red, penwidth=2, style=dashed];
    preprocess -> assembly [ltail=cluster_preprocess, lhead=cluster_assembly];
    preprocess -> assembly_long [ltail=cluster_preprocess, lhead=cluster_assembly_long];
    assembly -> coverage [ltail=cluster_assembly, lhead=cluster_coverage];
    assembly_long -> coverage_long [ltail=cluster_assembly_long, lhead=cluster_coverage_long];
    assembly -> binning_prokaryotic [ltail=cluster_assembly, lhead=cluster_binning_prokaryotic];
    assembly -> binning_eukaryotic [ltail=cluster_assembly, lhead=cluster_binning_eukaryotic];
    assembly -> binning_viral [ltail=cluster_assembly, lhead=cluster_binning_viral];
    assembly_long -> binning_prokaryotic [ltail=cluster_assembly_long, lhead=cluster_binning_prokaryotic];
    assembly_long -> binning_eukaryotic [ltail=cluster_assembly_long, lhead=cluster_binning_eukaryotic];
    assembly_long -> binning_viral [ltail=cluster_assembly_long, lhead=cluster_binning_viral];
    coverage -> binning_prokaryotic [ltail=cluster_coverage, lhead=cluster_binning_prokaryotic];
    coverage -> binning_eukaryotic [ltail=cluster_coverage, lhead=cluster_binning_eukaryotic];
    coverage -> binning_viral [ltail=cluster_coverage, lhead=cluster_binning_viral];
    coverage_long -> binning_prokaryotic [ltail=cluster_coverage_long, lhead=cluster_binning_prokaryotic];
    coverage_long -> binning_eukaryotic [ltail=cluster_coverage_long, lhead=cluster_binning_eukaryotic];
    coverage_long -> binning_viral [ltail=cluster_coverage_long, lhead=cluster_binning_viral];
    binning_prokaryotic -> classify_prokaryotic [ltail=cluster_binning_prokaryotic, lhead=cluster_classify_prokaryotic];
    binning_eukaryotic -> classify_eukaryotic [ltail=cluster_binning_eukaryotic, lhead=cluster_classify_eukaryotic];
    binning_viral -> classify_viral [ltail=cluster_binning_viral, lhead=cluster_classify_viral];
    binning_prokaryotic -> annotate [ltail=cluster_binning_prokaryotic, lhead=cluster_annotate];
    binning_eukaryotic -> annotate [ltail=cluster_binning_eukaryotic, lhead=cluster_annotate];
    binning_viral -> annotate [ltail=cluster_binning_viral, lhead=cluster_annotate];
    binning_prokaryotic -> mapping [ltail=cluster_binning_prokaryotic, lhead=cluster_mapping];
    binning_eukaryotic -> mapping [ltail=cluster_binning_eukaryotic, lhead=cluster_mapping];
    binning_viral -> mapping [ltail=cluster_binning_viral, lhead=cluster_mapping];
    binning_prokaryotic -> cluster [ltail=cluster_binning_prokaryotic, lhead=cluster_cluster];
    binning_eukaryotic -> cluster [ltail=cluster_binning_eukaryotic, lhead=cluster_cluster];
    binning_viral -> cluster [ltail=cluster_binning_viral, lhead=cluster_cluster];
    binning_prokaryotic -> biosynthetic [ltail=cluster_binning_prokaryotic, lhead=cluster_biosynthetic];
    binning_eukaryotic -> biosynthetic [ltail=cluster_binning_eukaryotic, lhead=cluster_biosynthetic];
    binning_prokaryotic -> phylogeny [ltail=cluster_binning_prokaryotic, lhead=cluster_phylogeny];
    binning_eukaryotic -> phylogeny [ltail=cluster_binning_eukaryotic, lhead=cluster_phylogeny];
}